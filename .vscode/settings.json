{

  //====================================================================================================================
  //- ********************************** EXTENSIONS SETTINGS SECTION ***************************************************
  //====================================================================================================================

  //! BetterComments ---------------------------------------------------------------------------------------------------
  "better-comments.tags": [
    {
      "tag": "!",
      "color": "#FF2D00",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "?",
      "color": "#3498DB",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "-",
      "color": "#97ffff",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "=",
      "color": "#00ff00",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "$",
      "color": "#f0f8ff",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "//",
      "color": "#474747",
      "strikethrough": true,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "todo",
      "color": "#FF8C00",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "*",
      "color": "#98C379",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    },
    {
      "tag": "(",
      "color": "#272F7A",
      "strikethrough": false,
      "underline": false,
      "backgroundColor": "transparent",
      "bold": false,
      "italic": false
    }
  ],
  //!$ BetterCommentsEnd -----------------------------------------------------------------------------------------------


  //! Material-Icon-Theme ----------------------------------------------------------------------------------------------

  "material-icon-theme.activeIconPack":"angular", // options: angular (default), angular_ngrx, nest, none, qwik, react, react_redux, roblox, vue, vue_vuex  || Select an icon pack that enables specific icons
  "material-icon-theme.enableLogging": false, // Enable logging to the output channel (false)
  "material-icon-theme.files.associations": {
    "*.myext": "html"
  }, // set custom file icon associations
  "material-icon-theme.files.color": "#90a4ae", // change the color of the file icons
  // "material-icon-theme.files.customClones": [
  //   {
  //     "name": "my-icon",
  //     "parent": "file_type_html",
  //     "source": "https://my-site.com/my-icon.svg"
  //   }
  // ], // clone any existing icon and create a new one with custom colors and associations
  // "material-icon-theme.folders.associations": {
  //   "myFolder": "src"
  // }, // set custom folder icon associations
  // "material-icon-theme.folders.color": "#90a4ae", // change the color of the folder icons
  // "material-icon-theme.folders.customClones": [
  //   {
  //     "name": "my-icon",
  //     "parent": "folder_type_src",
  //     "source": "https://my-site.com/my-icon.svg"
  //   }
  // ], // clone any existing icon and create a new one with custom colors and associations
  "material-icon-theme.folders.theme": "classic", // options: classic (default), none, specific || Set the type of the folder icons
  "material-icon-theme.hidesExplorerArrows": false, // hide explorer arrows before the folder
  // "material-icon-theme.languages.associations": {
  //   "*.myext": "html"
  // }, // set custom language icon associations
  // "material-icon-theme.languages.customClones": [
  //   {
  //     "name": "my-icon",
  //     "parent": "file_type_html",
  //     "source": "https://my-site.com/my-icon.svg"
  //   }
  // ], // clone any existing icon and create a new one with custom colors and associations
  "material-icon-theme.logLevel": "info", // options: info (default), debug, error || Set the log level for output messages
  "material-icon-theme.opacity": 1, // 1 is default, change opacity for icons
  // "material-icon-theme.rootFolders.associations": {
  //   "myRoot": "src"
  // }, // set custom root folder icon associations
  // "material-icon-theme.rootFolders.color": "#90a4ae", // change the color of the root folder icons
  "material-icon-theme.saturation": 1, // 1 is default, change saturation for icons

  //!$ Material-Icon-ThemeEnd ------------------------------------------------------------------------------------------

  //! CommentAnchor ----------------------------------------------------------------------------------------------------
  /* Usage:
    "ANCHOR_NAME" Description of the displayed problem/info
    "ANCHOR_NAME"[epic="category"] Description of the displayed problem/info

    LINK some/file.txt:50     -- :50 is optional and says which line number to scroll to
    
    ANCHOR[id=my-anchor] some anchor in some/file.txt
    LINK some/file.txt#my-anchor        links to the anchor in the file


    LINK #error-handling        link an anchor within the current file
  */

  "commentAnchors.tags.sortMethod": "type",   // set method used to sort anchors by  in the sidebar list:: line for sorting by line number, type for sorting by type
  "commentAnchors.workspace.lazyLoad": true,      // delay loading of workspace anchors until manual confirmation is given. enable for large workspaces
  "commentAnchors.tags.anchors": {
    "EXAMPLE": {
      "tag": "EXAMPLE",
      "iconColor": "orange",
      "highlightColor": "#32e0ec",
      "scope": "workspace",
      "backgroundColor": "rgba(49, 184, 79, 0.2",
      "styleComment": true,
      "borderStyle": "1px solid #23b2ea",
      "borderRadius": 6,
    },
    "ANCHOR": {
      "iconColor": "default",
      "highlightColor": "#A8C023",
      "scope": "file"
    },
    "TODO": {
      "iconColor": "blue",
      "highlightColor": "#3ea8ff",
      "scope": "workspace"
    },
    "FIXME": {
      "iconColor": "red",
      "highlightColor": "#F44336",
      "scope": "workspace"
    },
    "STUB": {
      "iconColor": "purple",
      "highlightColor": "#BA68C8",
      "scope": "file"
    },
    "NOTE": {
      "iconColor": "orange",
      "highlightColor": "#FFB300",
      "scope": "file"
    },
    "REVIEW": {
      "iconColor": "green",
      "highlightColor": "#64DD17",
      "scope": "workspace"
    },
    "SECTION": {
      "iconColor": "blurple",
      "highlightColor": "#896afc",
      "scope": "workspace",
      "behavior": "region"
    },
    "LINK": {
      "iconColor": "#2ecc71",
      "highlightColor": "#2ecc71",
      "scope": "workspace",
      "behavior": "link"
    },
    "DEBUG": {
      "iconColor": "#9E9E9E",
      "highlightColor": "#9E9E9E",
      "scope": "workspace"
    }
  },
  "commentAnchors.parseDelay": 10000,
  "commentAnchors.tags.matchCase": false,
  "commentAnchors.workspace.enabled": true,   // scan the whole workspace
  "commentAnchors.scrollPosition": "top",
  "commentAnchors.workspace.excludeFiles": "**/{node_modules,.git,.idea,target,out,build,bin,obj,dist,vendor,.xisf}/**/*",      // which files are excluded from being scanned by comment anchors
  "commentAnchors.showCursor": false, // Enable the commentAnchors.showCursor setting to display a file view entry for your current cursor position, making it even easier to see where you are in your current file relative to your anchors.,
  "commentAnchors.tagHighlights.enabled": true,
  "commentAnchors.workspace.maxFiles": 50,  // how many workspace files will be indexed and displayed in the workspace anchor list
  "commentAnchors.workspace.matchFiles": "**/*", // which files are scanned by comment anchors, good when workspace is large and not all files need to be scanned
  "commentAnchors.workspace.pathFormat": "full",  // the way paths are displayed in the workspace anchor tree (options: full for full path, abbreviated for folders to single character, hidden for completely)
  "commentAnchors.tags.provideAutoCompletion": true, // enable autocompletion for anchor tags
  "commentAnchors.tags.displayInSidebar": true,  // if tags are included in sidebar or not
  "commentAnchors.tags.displayInGutter": true,  // whether gutter icons are shown
  "commentAnchors.tags.displayInRuler": true, // set whether icons are represented by colored bars in the scrollbar ruler
  "commentAnchors.tags.displayLineNumber": true, // whether line numbers are displayex in the sidebar
  "commentAnchors.tags.displayTagName": true, // wheter tag names are displayed in the sidebar
  "commentAnchors.tags.rulerStyle": "center", // set the appearance in the overview ruler
  "commentAnchors.tags.expandSections": false, // wheter sections are automatically expanded in the anchor tree
  "commentAnchors.tags.separators": [
      " ",
      ": ",
      " - "
  ], // List of accepted separators
  "commentAnchors.epic.provideAutoCompletion": true, // enable autocompletion support for epic
  "commentAnchors.epic.seqStep": 1, // config how much should auto-completion-item add on current max-seq
  //!$ CommentAnchorEnd ------------------------------------------------------------------------------------------------


  //! PathIntellisence -------------------------------------------------------------------------------------------------

  "path-intellisense.absolutePathTo": "workspace", // default : "", 	If defined, unmapped absolute path imports are based on this location. Takes priority over 'absolutePathToWorkspace' if both are defined
  "path-intellisense.absolutePathToWorkspace": true, //default: true, Sets an absolute path to the current workspace
  "path-intellisense.autoSlashAfterDirectory": false, // default: false, Automatically adds a slash after directories
  "path-intellisense.autoTriggerNextSuggestion": false, // default: false, Automatically triggers the next suggestion after previous suggestion
  "path-intellisense.extensionOnImport": false, // default: false, adds the file extension to a importt statements
  "path-intellisense.ignoreTsConfigBaseUrl": false, // default: false, Ignores tsconfig file for mappings
  "path-intellisense.mappings": {
    "@": "${workspaceRoot}/src"
  }, // default: {}, 	Mappings for paths. The values should be interpreted as absolute paths (and can use '${workspaceFolder}')
  "path-intellisense.showHiddenFiles": false, // default: false, Show hidden files
  "path-intellisense.showOnAbsoluteSlash": true, // default: true, Shows suggestions when the import starts with a forward slash ('/')

  //!$ PathIntellisenceEnd ---------------------------------------------------------------------------------------------

  //! AutoPep8 ---------------------------------------------------------------------------------------------------------
  "autopep8.args": [
    "--max-line-length=200"
  ],
  //!$ AutoPep8End -----------------------------------------------------------------------------------------------------

  //! CodeRunner -------------------------------------------------------------------------------------------------------
  "code-runner.executorMap": {
        "javascript": "node",
        "php": "C:\\php\\php.exe",
        "python": "python",
        "perl": "perl",
        "ruby": "C:\\Ruby23-x64\\bin\\ruby.exe",
        "go": "go run",
        "html": "\"C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe\"",
        "java": "cd $dir && javac $fileName && java $fileNameWithoutExt",
        "c": "cd $dir && gcc $fileName -o $fileNameWithoutExt && $dir$fileNameWithoutExt"
    },
    "code-runner.executorMapByGlob": {
        "pom.xml": "cd $dir && mvn clean package",
        "*.test.js": "tap",
        "*.js": "node"
    },
    "code-runner.defaultLanguage": "javascript",
    "code-runner.customCommand": "echo Hello",
    "code-runner.cwd": "path/to/working/directory",
    "code-runner.clearPreviousOutput": false,
    "code-runner.saveAllFilesBeforeRun": false,
    "code-runner.showExecutionMessage": true,
    "code-runner.runInTerminal": false,
    "code-runner.preserveFocus": false,       //! test
    "code-runner.ignoreSelection": false,
    "code-runner.showRunIconInEditorTitleMenu": false,
    "code-runner.showRunCommandInEditorContextMenu": false,   //! test
    "code-runner.showRunCommandInExplorerContextMenu": false,   //!textToSpeechInProgress
    "code-runner.showStopIconInEditorTitleMenu": false,         //! test
    "code-runner.terminalRoot": "ROOT>",       // default is ""
    "code-runner.temporaryFileName": "NONE",    // default is "tempCodeRunnerFile"
    "code-runner.respectShebang": false,      // default is True
    "code-runner.enableAppInsights": false,
  //!$ CodeRunnerEnd ---------------------------------------------------------------------------------------------------


  //! TypeScript -------------------------------------------------------------------------------------------------------
  "typescript.format.placeOpenBraceOnNewLineForFunctions": true,
  "typescript.format.semicolons": "insert",
  "typescript.inlayHints.functionLikeReturnTypes.enabled": true,
  "typescript.inlayHints.parameterTypes.enabled": true,
  //!$ TypeScriptEnd ---------------------------------------------------------------------------------------------------

  //! AutoDocstring ----------------------------------------------------------------------------------------------------
  "autoDocstring.docstringFormat": "numpy",
  "autoDocstring.customTemplatePath": "",           // Path to a custom template for docstrings
  "autoDocstring.generateDocstringOnEnter": true,
  "autoDocstring.guessTypes": true,
  "autoDocstring.quoteStyle":"'''",
  //!$ AutoDocsttringEnd -----------------------------------------------------------------------------------------------
  
  //! Formatting -------------------------------------------------------------------------------------------------------
  "[python]": {
    "editor.defaultFormatter": "ms-python.autopep8"
  },
  "[csharp]": {
    "editor.defaultFormatter": "csharpier.csharpier-vscode"
  },
  "[javascript]": {
    "editor.defaultFormatter": "dbaeumer.vscode-eslint"
  },
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[markdown]":{
    "editor.defaultFormatter": "yzhang.markdown-all-in-one"
  },
  //!$ FormattingEnd ---------------------------------------------------------------------------------------------------

  //! JavaScript -------------------------------------------------------------------------------------------------------
  "javascript.format.placeOpenBraceOnNewLineForControlBlocks": true,
  "javascript.format.placeOpenBraceOnNewLineForFunctions": true,
  "javascript.format.insertSpaceBeforeFunctionParenthesis": true,
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": true,
  "javascript.format.semicolons": "ignore",
  "javascript.inlayHints.enabled": false,
  "javascript.preferences.quoteStyle": "double",
  "js/ts.implicitProjectConfig.checkJs": true,
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": true,
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": false,
  "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": true,
  "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,
  "javascript.validate.enable": false,
  "javascript.inlayHints.enumMemberValues.enabled": false,
  //!$ JavaScript ------------------------------------------------------------------------------------------------------

  //! PathAutoComplete -------------------------------------------------------------------------------------------------
  "path-autocomplete.disableUpOneFolder": false,
  //!$ PathAutoCompleteEnd ---------------------------------------------------------------------------------------------

  //! LiveShare --------------------------------------------------------------------------------------------------------
  "liveshare.allowGuestDebugControl": true,
  "liveshare.allowGuestTaskControl": true,
  "liveshare.joinDebugSessionOption": "Prompt",
  //!$ LiveShareEnd ----------------------------------------------------------------------------------------------------


  //! eslint -----------------------------------------------------------------------------------------------------------
  "eslint.format.enable": true,
  //!$ eslint ----------------------------------------------------------------------------------------------------------

  //! ruff -------------------------------------------------------------------------------------------------------------
  "ruff.importStrategy": "useBundled",
  "ruff.lineLength": 200,
  //!$ eslintEnd -------------------------------------------------------------------------------------------------------

  //! .NET -------------------------------------------------------------------------------------------------------------
  "dotnet.backgroundAnalysis.analyzerDiagnosticsScope": "fullSolution",
  "dotnet.backgroundAnalysis.compilerDiagnosticsScope": "fullSolution",
  //!$ .NETEnd ---------------------------------------------------------------------------------------------------------


  //! PDF --------------------------------------------------------------------------------------------------------------
  "pdf-preview.default.cursor": "hand", //default: select, options: hand, select || the default cursol tool for preview
  "pdf-preview.default.scale": "auto", // default: auto, options: auto, fit, page-actual, page-width, page-height, 0.5, 1, 1.5, 2, 3, 4, 5 || The default zoom level for preview. Allowed values are auto, page-actual, page-fit, page-width, and 1-based scale values. (1.0 means 100%
  "pdf-preview.default.scrollMode": "horizontal", // default: vertical, options: vertical, horizontal, wrapped || The default scroll mode for preview
  "pdf-preview.default.sidebar": false, // default: false || Show the sidebar on load. The default visiblity of sidebar for preview.
  "pdf-preview.default.spreadMode": "none", // default: none, options: none, odd, even || The default spread mode for preview
  //!$ PDFEnd ----------------------------------------------------------------------------------------------------------

  //! Github -----------------------------------------XXXX--------------------------------------------------------------

  "github.copilot.advanced": {},
  "github.copilot.chat.scopeSelection": true,
  "github.copilot.editor.enableAutoCompletions": true, // automatically show inline completions
  "github.copilot.enable": {
    "*": true,
    "plaintext": false,
    "markdown": false,
    "scminput": false,
    "typescript": false,
    "cpp": false,
    "json": false,
  },  // Enable or disable Copilot completions for specified languages
  


  //!$ GithubEnd ----------------------------------------------------------------------------------------------------------
  
  //! Git --------------------------------------------XXXX--------------------------------------------------------------
  "git.mergeEditor": true,
  "git.pullBeforeCheckout": true,


  //!$ GitEnd ----------------------------------------------------------------------------------------------------------

  //! Prettier ---------------------------------------------------------------------------------------------------------
  "prettier.endOfLine":"auto", // default: "lf", options: "lf", "crlf", "auto", "cr" || specifiy the end of line used by prettier
  "prettier.printWidth": 80,  // default: 80, Fit code within this line limit
  "prettier.quoteProps": "preserve",  // default: "as-needed", options: as-needed, consistent, preserve || Change when properties in objects are quoted
  "prettier.singleAttributePerLine": true,  // default: false || Enforces single attribute per line in HTML, JSX, Vue and Angular
  "prettier.tabWidth": 4, // default: 2, Number of spaces it should use per tab
  "prettier.useTabs": true, //default : false, Indent lines with tabs.
  "prettier.arrowParens": "always", // default: always, options: always, avoid || Include parentheses around a sole arrow function parameter.
  "prettier.bracketSameLine": false, // default: false, Puts the > of a multi-line HTML (HTML, JSX, Vue, Angular) element at the end of the last line instead of being alone on the next line (does not apply to self closing elements)
  "prettier.bracketSpacing": true, // default: true, Print spaces between brackets in object literals.
  "prettier.configPath": "", // default: "", Path to a Prettier configuration file
  "prettier.documentSelectors": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "json",
  ], // default: [], list of glob patterns to register prettier formatter
  "prettier.embeddedLanguageFormatting": "auto", // default: auto, options: auto, off, on || Controls whether Prettier formats quoted code embedded in the file.
  "prettier.enable": true, // default: true, Enable/disable prettier, reload required
  "prettier.enableDebugLogs": false, // default: false, Enable/disable debug logs for troubleshooting
  "prettier.experimentalTernaries": false, // default: false, Try prettier's new ternary formatting before it becomes the default behavior.
  "prettier.htmlWhitespaceSensitivity": "css", // default: "css", options: "css", "strict", "ignore" || Specify the global whitespace sensitivity for HTML files.
  "prettier.ignorePath": ".prettierignore", // default: ".prettierignore", Path to a file containing patterns of files to ignore.
  "prettier.insertPragma": false, // Prettier can insert a special @format marker at the top of files specifying that the file has been formatted with prettier. This works well when used in tandem with the --require-pragma option. If there is already a docblock at the top of the file then this option will add a newline to it with the @format marker
  "prettier.jsxSingleQuote": false, // default: false, Use single quotes instead of double quotes in JSX.
  "prettier.prettierPath": "", // default: "", Path to the prettier module, eg: ./node_modules/prettier
  "prettier.proseWrap": "always", // default: "preserve", options: "always", "never", "preserve" || (Markdown) wrap prose over multiple lines
  "prettier.requireConfig": false, // default: false, 	Require a prettier configuration file to format. See documentation for valid configuration files, Note, untitled files will still be formatted using the VS Code prettier settings even when this setting is set.
  "prettier.requirePragma": false, // default: false, Prettier can restrict itself to only format files that contain a special comment, called a pragma, at the top of the file. This is very useful when gradually transitioning large, unformatted codebases to prettier
  "prettier.resolveGlobalModules": false, // default: false, When enabled, this extension will attempt to use global npm or yarn modules if local modules cannot be resolved. This setting can have a negative performance impact, particularly on Windows when you have attached network drives. Only enable this if you must use global modules.
  "prettier.semi": true, // default: true, Whether to add a semicolon at the end of every line.
  "prettier.singleQuote": false, // default: false, Use single quotes instead of double quotes.
  "prettier.trailingComma": "es5", // default: "es5", options: "none", "es5", "all" || Controls the printing of trailing commas wherever possible. Valid options
  "prettier.useEditorConfig": true, // default: true || Whether or not to take .editorconfig into account when parsing configuration. See the prettier.resolveConfig docs for details
  "prettier.vueIndentScriptAndStyle": false, // default: false, Whether or not to indent the code inside <script> and <style> tags in Vue SFC files.
  "prettier.withNodeModules": false, // default: false || This extension will process files in node_modules
  //!$ PrettierEnd -----------------------------------------------------------------------------------------------------

  //! Python -----------------------------------------------------------------------------------------------------------
  "python.analysis.autoImportCompletions": true,
  "python.analysis.autoFormatStrings": true,
  "python.analysis.inlayHints.enabled": false,
  "python.analysis.typeCheckingMode": "standard",
  "pylint.args": [
    "--max-line-length=200",
    "--disable=C0111",
    "--disable=C0303"
  ],
  "python.missingPackage.severity": "Error",
  //!$ PythonEnd -------------------------------------------------------------------------------------------------------


  //! PythonIndendation ------------------------------------------------------------------------------------------------

  "pythonIndent.keepHangingBracketOnLine": false, // default: false || When creating a hanging indent, do not put the closing bracket on its own line
  "pythonIndent.trimLinesWithOnlyWhitespace": false, // default: false || trims lines that contain only whitespace after pressing Enter on them
  "pythonIndent.useTabOnHangingIndent": false, // default: false || After creating a hanging indent, press tab to leave the indented section and go to the ending bracket

  //!$ PythonIndendationEnd --------------------------------------------------------------------------------------------

  //! IndentRainbow ----------------------------------------------------------------------------------------------------

  "indentRainbow.indicatorStyle": "light", // Using the light mode   (other options: classic)
  "indentRainbow.colorOnWhiteSpaceOnly": false,  // If error color is disabled, indent colors will be rendered until the length of rendered characters (white spaces, tabs, and other ones) is divisible by tabsize. Turn on this option to render white spaces and tabs only
  "indentRainbow.errorColor": "rgba(128,32,32,0.6)", // 	Indent color for when there is an error in the indentation, for example if you have your tabs set to 2 spaces but the indent is 3 spaces. Can be any type of web based color format (hex, rgba, rgb
  "indentRainbow.excludedLanguages": [
    "plaintext"
  ],  // An array of language identifiers for which the extension should be disabled.
  "indentRainbow.ignoreErrorLanguages": [
    "markdown"
  ],  // For which languages indent-rainbow should skip indent error detection (use '*' to deactivate errors for all languages)
  "indentRainbow.lightIndicatorStyleLineWidth": 2,  // we use a simple 1 pixel wide line
  "indentRainbow.ignoreLinePatterns": [
    "/[ \t]* [*]/g",
    "/[ \t]+[/]{2}/g"
  ],   // Skip error highlighting for RegEx patterns. Defaults to c/cpp decorated block and full line comments
  "indentRainbow.includedLanguages": [
  ],  // For which languages indent-rainbow should be activated. When empty will use for all languages.
  "indentRainbow.indentSetter": {}, // 	Automatically change indent settings for languages (see README.md for details)
  "indentRainbow.colors": [
    "rgba(255,255,64,0.3)",
    "rgba(127,255,127,0.3)",
    "rgba(255,127,255,0.3)",
    "rgba(79,236,236,0.3)"
  ],   // An array with color (hex, rgba, rgb) strings which are used as colors, can be any length.
  "indentRainbow.updateDelay": 100, // The delay in ms until the editor gets updated
  "indentRainbow.tabmixColor": "rgba(128,32,96,0.6)", // Indent color for when there is a mix between spaces and tabs in the indentation. Can be any type of web based color format (hex, rgba, rgb) or a empty string(to be disabled this coloring)

  //!$ INdentRainbowEnd ------------------------------------------------------------------------------------------------

  //! cSpell ------------------------------------------XXXXX------------------------------------------------------------
  "cSpell.language": "en,de",
  "cSpell.words":[
    "csterrn",
    "NOTME",
    "centipede"
  ],   // words always considered correct
  "cSpell.flagWords": [
    "hte"
  ], // words always considered wrong (e.g., hte --> the)
  "cSpell.maxNumberOfProblems": 100,  // Controls the maximum number of spelling errors per document.
  "cSpell.numSuggestions": 8, // Controls the number of suggestions shown.
  "cSpell.minWordLength": 4,  // The minimum length of a word before checking it against a dictionary.
  // "cSpell.enabledLanguageIds": [
  //     "csharp",
  //     "go",
  //     "javascript",
  //     "javascriptreact",
  //     "markdown",
  //     "php",
  //     "plaintext",
  //     "typescript",
  //     "typescriptreact",
  //     "yaml",
  //     "sql"
  // ],  // Specify file types to spell check.
  "cSpell.enabled": true,  // Enable / Disable the spell checker.
  "cSpell.allowCompoundWords": false, // Enable / Disable compound words like 'errormessage'
  "cSpell.ignoreWords": ["behaviour"],    // Words to be ignored and not suggested.
  "cSpell.userWords": [],   // User words to add to dictionary.  Should only be in the user settings.
  "cSpell.ignorePaths": [
      "node_modules",        // this will ignore anything the node_modules directory
      "**/node_modules",     // the same for this one
      "**/node_modules/**",  // the same for this one
      "node_modules/**",     // Doesn't currently work due to how the current working directory is determined.
      "vscode-extension",    //
      ".git",                // Ignore the .git directory
      "*.dll",               // Ignore all .dll files.
      "**/*.dll"             // Ignore all .dll files
  ],// Specify paths/files to ignore.
  "cSpell.spellCheckDelayMs": 50, // Set the delay before spell checking the document. Default is 50.
  // Set Diagnostic Reporting Level
  //   Error - Report Spelling Issues as Errors
  //   Warning - Report Spelling Issues as Warnings
  //   Information - Report Spelling Issues as Information (default)
  //   Hint - Report Spelling Issues as Hints, will not show up in Problems
  "cSpell.diagnosticLevel": "Hint",

  //!$ cSpellEnd -------------------------------------------------------------------------------------------------------


  //! JavaDebugger -----------------------------------------------------------------------------------------------------
  "java.debug.logLevel": "error", // options: error, info, warn, verbose , defaults to warn
  "java.debug.settings.showHex": true, // show numbers in hex format in "variables" viewlet, default to false
  "java.debug.settings.console": "externalTerminal",  // specififed console to launch java program, default is externalTerminal;; if customize modify console in launch.json: [internalConsole=VSCode debug console(inputstream not supported)][integratedTerminal=integratedtermiinal][externalTerminal=external terminal that can be configured in usersettings]
  "java.debug.settings.debugSupportOnDecompiledSource": "off", // _ ** Needs Language Support for Java by RedHat ** ||  [Experimental]: Enable debugging support on the decompiled source code. Be aware that this feature may affect the loading speed of Call Stack Viewlet
  "java.debug.settings.enableRunDebugCodeLens": true, // enable the code lens provider for the run and debug buttons over main enty points, default to true
  "java.debug.settings.exceptionBreakpoint.allowClasses": [], // Specifies the allowed locations where the exception breakpoint can break on. Wildcard is supported, e.g. java.*, *.Foo
  "java.debug.settings.exceptionBreakpoint.exceptionTypes": [],  // set of exception types you want to break on (e.g., java.lang.NullPointerException), A specific exception type and its subclasses can be selected for caught exceptions, uncaught exceptions, or both can be selected.
  "java.debug.settings.exceptionBreakpoint.skipClasses": [], // Skip the specified classes when breaking on exception [$JDK = Skip the JDK classes from the default system bootstrap classpath, such as rt.jar, jrt-fs.jar][$Libraries = Skip the classes from application libraries, such as Maven, Gradle dependencies][java.* = Skip the specified classes. Wildcard is supported.][java.lang.ClassLoader = skip the class loaders]
  "java.debug.settings.forceBuildBeforeLaunch": true,   // force building the workspace before launching the java programm, default to true
  "java.debug.settings.jdwp.async": "auto", // Experimental: Controls whether the debugger is allowed to send JDWP commands asynchronously. Async mode can improve remote debugging response speed on high-latency networks. Defaults to auto, and automatically switch to async mode when the latency of a single jdwp request exceeds 15ms during attach debugging (values: auto, on, of)
  "java.debug.settings.jdwp.limitOfVariablesPerJdwpRequest": 100, // maximum number of variables or fields that can be requested in one JDWP request. The higher the value, the less frequently debuggee will be requested when expanding the variable view. Also a large number can cause JDWP request timeout. Defaults to 100
  "java.debug.settings.jdwp.requestTimeout": 3000,  // timeout (ms) of JDWP request when the debugger communicates with the target JVM. Defaults to 3000
  "java.debug.settings.maxStringLength": 0, // maximum string length of strings displayed in "Variables" or "Debug Console" viewlet: string longer than that will be trimmed, default 0 means no trim performed
  "java.debug.settings.numericPrecision": 0,  // precision when formatting doubles in "Variables" or "Debug COnsole"
  "java.debug.settings.onBuildFailureProceed": false, // force to proceed when build fails, default to false
  "java.debug.settings.showLogicalStructure": true, // show logical structure for the collection and map classes in "variables" viewlet, defaults to true
  "java.debug.settings.showQualifiedNames": false,  // show fully qualified class names in "variables" viewlet, defaults to false
  "java.debug.settings.showStaticVariables": false, // show static variables in "variables" viewlet, defaults to false
  "java.debug.settings.showToString": true,  // show "toString()" value for all classes that override "toString" in "variables" viewlet, default to true
  "java.debug.settings.stepping.skipClasses": [],  // Skip the specified classes when stepping (same values as in "java.debug.settings.exceptionBreakpoint.skipClasses")
  "java.debug.settings.stepping.skipConstructors": false, // Skip constructor methods when stepping
  "java.debug.settings.stepping.skipStaticInitializers": false, //skip static initializer methods when stepping
  "java.debug.settings.stepping.skipSynthetics": false, // Skip synthetic methods when stepping.
  "java.debug.settings.vmArgs": "", // default VM arguments to launch the Java program. Eg. Use '-Xmx1G -ea' to increase the heap size to 1GB and enable assertions. If you want to customize the VM arguments for a specific debug session, please modify the 'vmArgs' config in launch.json
  "java.debug.settings.hotCodeReplace": "auto", // reload the changed java classes during debugging, default to manual :: [manual=click toolbar to apply changes][auto=atomatically apply the changes after compilation, only works when "java.autobuild.enabled" is on][never=never appply the changes]
  //!$ JavaDebuggerEnd -------------------------------------------------------------------------------------------------


  "java.silentNotification": false, // Controls whether notifications can be used to report progress. If true, use status bar to report progress instead. Defaults to false


  //! JavaExtensionPack ------------------------------------------------------------------------------------------------
  "java.help.collectErrorLog": false, // Whether to send back detailed information from error logs for diagnostic purpose, default to false
  "java.help.firstView": "auto", // Sets the default view which is presented during the first use (values: auto, gettingStarted, welcome, overview, none)
  "java.help.showReleaseNotes": true, // Show release notes of Extension Pack for Java on startup , default to true
  


  //! Docker -----------------------------------------------------------------------------------------------------------


  //!$ DockerEnd -------------------------------------------------------------------------------------------------------


  //====================================================================================================================
  //- ************************************* GENERAL SETTINGS SECTION ***************************************************
  //====================================================================================================================


  //! editor -----------------------------------------------------------------------------------------------------------
  "editor.fontSize": 14,
  "editor.fontLigatures": true,
  "editor.formatOnSave": true,
  "editor.formatOnPaste": false,
  "editor.renderWhitespace": "trailing",
  "editor.tabSize": 4,
  "editor.rulers": [80, 120],
  "editor.suggestSelection": "first",
  "diffEditor.ignoreTrimWhitespace": false,
  "diffEditor.experimental.showMoves": true,
  "diffEditor.hideUnchangedRegions.contextLineCount": 5,
  "editor.stickyScroll.enabled": true,
  "editor.minimap.enabled": true,
  "editor.minimap.showSlider": "always",
  "editor.fontFamily": "JetBrains Mono",      // Needed?
  
  //!$ editorEnd -------------------------------------------------------------------------------------------------------


  //! workbench --------------------------------------------------------------------------------------------------------
  "workbench.colorTheme": "Default Dark Modern",
  "workbench.iconTheme": "material-icon-theme",
  "workbench.activityBar.location": "default",
  "workbench.tree.stickyScrollMaxItemCount": 5,
  "workbench.colorCustomizations": {
    "[Default Dark Modern]": {
      "tab.activeBorderTop": "#00FF00",
      "tab.unfocusedActiveBorderTop": "#00FF0088",
      "textCodeBlock.background": "#00000055"
    },
    "editor.wordHighlightStrongBorder": "#FF6347",
    "editor.wordHighlightBorder": "#FFD700",
    "editor.selectionHighlightBorder": "#A9A9A9"
  },
  "workbench.editor.revealIfOpen": true,
  "workbench.tree.indent": 20,
  //!$ workbenchEnd ----------------------------------------------------------------------------------------------------

  //! terminal ---------------------------------------------------------------------------------------------------------
  "terminal.integrated.inheritEnv": false,
  "terminal.integrated.defaultProfile.windows": "JavaSE-21 LTS",
  //!$ terminalEnd -----------------------------------------------------------------------------------------------------

  //! Debug ------------------------------------------------------------------------------------------------------------
  "debug.onTaskErrors": "debugAnyway",
  //!$ DebugEnd --------------------------------------------------------------------------------------------------------

  //! Explorer ---------------------------------------------------------------------------------------------------------
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,
  //!$ ExplorerEnd -----------------------------------------------------------------------------------------------------

  //! Window -----------------------------------------------------------------------------------------------------------
  "window.zoomLevel": 0,
  "window.autoDetectColorScheme": false, // default: false, Automatically detect color scheme changes and switch the theme
  "window.closeWhenEmpty": false, // default: false, Controls whether closing the last editor should also close the window. This setting only applies for windows that do not have folders opened.
  //!$ WindowEnd -------------------------------------------------------------------------------------------------------

  //! file -------------------------------------------------------------------------------------------------------------
  "files.autoSave": "onFocusChange",
  //!$ fileEnd ---------------------------------------------------------------------------------------------------------






















  "C_Cpp.intelliSenseEngine": "disabled",
  "clangd.path": "c:\\Users\\lukas\\AppData\\Roaming\\Code\\User\\globalStorage\\llvm-vs-code-extensions.vscode-clangd\\install\\17.0.3\\clangd_17.0.3\\bin\\clangd.exe",
  "cmake.options.statusBarVisibility": "visible",
  
  "cmake.configureOnOpen": true,






  //region ServerSettings
  "python.languageServer": "Pylance",
  "notebook.stickyScroll.enabled": true,
  "editor.stickyScroll.defaultModel": "foldingProviderModel",
  "editor.stickyScroll.maxLineCount": 8,
  "terminal.integrated.stickyScroll.enabled": true,
  "arduino.useArduinoCli": true,
  "editor.codeActionsOnSave": {
    "source.organizeImports": "explicit"
  },
  "editor.linkedEditing": true,

  "editor.unicodeHighlight.includeComments": true,
  
  "files.eol": "\n",
  "[bat]": {
    "files.eol": "\r\n"
  },
  "emmet.variables": {
    "lang": "de"
  },
  
  "trailing-spaces.backgroundColor": "rgba(255,0,0,0.1)",
  "trailing-spaces.includeEmptyLines": false,
  "terminal.integrated.tabs.hideCondition": "never",
  "terminal.integrated.enablePersistentSessions": false,
  "java.configuration.detectJdksAtStart": false,
  "java.configuration.updateBuildConfiguration": "automatic",
  
  "java.dependency.packagePresentation": "hierarchical",
  "java.sources.organizeImports.staticStarThreshold": 1,
  "java.configuration.runtimes": [
    {
      "name": "JavaSE-1.8",
      "path": "C:\\Users\\lukas\\AppData\\Roaming\\Code\\User\\globalStorage\\pleiades.java-extension-pack-jdk\\java\\8"
    },
    {
      "name": "JavaSE-11",
      "path": "C:\\Users\\lukas\\AppData\\Roaming\\Code\\User\\globalStorage\\pleiades.java-extension-pack-jdk\\java\\11"
    },
    {
      "name": "JavaSE-17",
      "path": "C:\\Users\\lukas\\AppData\\Roaming\\Code\\User\\globalStorage\\pleiades.java-extension-pack-jdk\\java\\17"
    },
    {
      "name": "JavaSE-21",
      "path": "C:\\Program Files\\Java\\jdk-21"
    },
    {
      "name": "JavaSE-23",
      "path": "C:\\Users\\lukas\\AppData\\Roaming\\Code\\User\\globalStorage\\pleiades.java-extension-pack-jdk\\java\\latest",
      "default": true
    }
  ],
  "terminal.integrated.profiles.windows": {
    "JavaSE-1.8 LTS": {
      "overrideName": true,
      "env": {
        "PATH": "C:\\Users\\lukas\\AppData\\Roaming\\Code\\User\\globalStorage\\pleiades.java-extension-pack-jdk\\java\\8\\bin;${env:PATH}",
        "JAVA_HOME": "C:\\Users\\lukas\\AppData\\Roaming\\Code\\User\\globalStorage\\pleiades.java-extension-pack-jdk\\java\\8"
      },
      "path": "cmd"
    },
    "JavaSE-11 LTS": {
      "overrideName": true,
      "env": {
        "PATH": "C:\\Users\\lukas\\AppData\\Roaming\\Code\\User\\globalStorage\\pleiades.java-extension-pack-jdk\\java\\11\\bin;${env:PATH}",
        "JAVA_HOME": "C:\\Users\\lukas\\AppData\\Roaming\\Code\\User\\globalStorage\\pleiades.java-extension-pack-jdk\\java\\11"
      },
      "path": "cmd"
    },
    "JavaSE-17 LTS": {
      "overrideName": true,
      "env": {
        "PATH": "C:\\Users\\lukas\\AppData\\Roaming\\Code\\User\\globalStorage\\pleiades.java-extension-pack-jdk\\java\\17\\bin;${env:PATH}",
        "JAVA_HOME": "C:\\Users\\lukas\\AppData\\Roaming\\Code\\User\\globalStorage\\pleiades.java-extension-pack-jdk\\java\\17"
      },
      "path": "cmd"
    },
    "JavaSE-21 LTS": {
      "overrideName": true,
      "env": {
        "PATH": "C:\\Program Files\\Java\\jdk-21\\bin;${env:PATH}",
        "JAVA_TOOL_OPTIONS": "-Dstdout.encoding=UTF-8 -Dstderr.encoding=UTF-8",
        "JAVA_HOME": "C:\\Program Files\\Java\\jdk-21"
      },
      "path": "cmd",
      "args": ["/k", "chcp", "65001"]
    },
    "JavaSE-23": {
      "overrideName": true,
      "env": {
        "PATH": "C:\\Users\\lukas\\AppData\\Roaming\\Code\\User\\globalStorage\\pleiades.java-extension-pack-jdk\\java\\latest\\bin;${env:PATH}",
        "JAVA_TOOL_OPTIONS": "-Dstdout.encoding=UTF-8 -Dstderr.encoding=UTF-8",
        "JAVA_HOME": "C:\\Users\\lukas\\AppData\\Roaming\\Code\\User\\globalStorage\\pleiades.java-extension-pack-jdk\\java\\latest"
      },
      "path": "cmd",
      "args": ["/k", "chcp", "65001"]
    }
  },
  "terminal.integrated.automationProfile.windows": {
    "path": "cmd"
  },
  "java.test.config": {
    "vmArgs": ["-Dstdout.encoding=UTF-8", "-Dstderr.encoding=UTF-8"]
  },
  "terminal.integrated.env.windows": {
    "JAVA_HOME": "C:\\Program Files\\Java\\jdk-21",
    "PATH": "C:\\Program Files\\Java\\jdk-21\\bin;${env:PATH}"
  },
  "maven.terminal.customEnv": [
    {
      "environmentVariable": "JAVA_HOME",
      "value": "C:\\Program Files\\Java\\jdk-21"
    }
  ],
  "java.import.gradle.java.home": "C:\\Program Files\\Java\\jdk-21",
  "plantuml.java": "C:\\Program Files\\Java\\jdk-21\\bin\\java.exe",
  "maven.executable.path": "C:\\Users\\lukas\\AppData\\Roaming\\Code\\User\\globalStorage\\pleiades.java-extension-pack-jdk\\maven\\latest\\bin\\mvn",
  "java.import.gradle.home": "C:\\Users\\lukas\\AppData\\Roaming\\Code\\User\\globalStorage\\pleiades.java-extension-pack-jdk\\gradle\\latest",
  "git.openRepositoryInParentFolders": "never",
  "java.compile.nullAnalysis.mode": "automatic",
  "java.maxConcurrentBuilds": 8,

  "todo-tree.highlights.defaultHighlight": {
    "icon": "alert",
    "type": "text",
    "foreground": "red",
    "background": "white",
    "opacity": 50,
    "iconColour": "blue"
  },
  "todo-tree.highlights.customHighlight": {
    "todo": {
      "icon": "check",
      "type": "line"
    },
    "FIXME": {
      "foreground": "black",
      "iconColour": "yellow",
      "gutterIcon": true
    }
  },
  //endregion




  
}